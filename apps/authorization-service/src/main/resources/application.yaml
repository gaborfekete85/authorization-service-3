server:
  port: 8302
spring:
  application:
    name: authorization-service
  datasource:
    url: ${DATASOURCE_URL:jdbc:postgresql://139.59.207.177:5432/postgres?currentSchema=rewura_dev_auth}
    username: ${DATASOURCE_USER:postgres}
    password: ${DATASOURCE_PASSWORD:qUHB7r7Viw}
  liquibase:
    change-log: classpath:/db/db.changelog-master.xml
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        ddl-auto: none
        jdbc:
          lob:
            non_contextual_creation: true
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID:912050282042-ais7fbu2uns1u3go9eoe6l8iaiv3iruo.apps.googleusercontent.com}
            clientSecret: ${GOOGLE_CLIENT_SECRET:5Ex-92yP7Q1YU_TmgtVXiYR5}
            redirectUri: "${BASE_URL:http://localhost:8302}/oauth2/callback/{registrationId}" # Registered in facebook developer portal: https://cloudbookings.com/oauth2/callback
            scope:
              - email
              - profile
              - openid
          facebook:
            clientId: ${FACEBOOK_CLIENT_ID:1670650839666976}
            clientSecret: ${FACEBOOK_CLIENT_SECRET:97e1e2cfb217a1730563ad1361bda51c}
            redirectUri: "${BASE_URL:http://localhost:8302}/oauth2/callback/{registrationId}" # Registered in Google developer portal: https://cloudbookings.com/oauth2/callback/google
            scope:
              - email
              - public_profile
          github:
            clientId: d3e47fc2ddd966fa4352
            clientSecret: 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
            redirectUri: "{BASE_URL:http://localhost:8302}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
        provider:
#          google:
#            authorization-uri: https://accounts.google.com/o/oauth2/auth
#            token-uri: https://oauth2.googleapis.com/token
#            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
#            user-name-attribute: email
          facebook:
            authorizationUri: https://www.facebook.com/v12.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v12.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v12.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,picture.width(250).height(250)
          custom:
            authorizationUri: ${BASE_URL:http://localhost:8302}/oauth/authorize
            tokenUri: ${BASE_URL:http://localhost:8302}/oauth/token
            userInfoUri: ${BASE_URL:http://localhost:8302}/api/auth/user/me
            userNameAttribute: name
            emailAttribute: email
            userInfoAuthenticationMethod: header

app:
  name: "Authorization Service"
  smtp:
    userName: gabor.fekete85@gmail.com
    password: ${SMTP_PASSWORD:5abmCGkcwUryvWKD}
  publicEndpoint: ${BASE_URL:http://localhost:8302}
  auth:
    tokenSecret: 984050a14efc4eae2555729d6eaf0f78329bdf2eed1dc81219df675ede353f6e05b2ecf6335e0bacbabf21e4ac245663634cf1270
    tokenExpirationMsec: 86400000 # 1 day
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    # To the registration URLs the provider redirects hence those mist be registered at them
    # This URL goes back to the FE
    authorizedRedirectUris:
      - https://cloudbookings.com/oauth2/redirect
      - https://awsbooking.gleeze.com/oauth2/redirect
      - https://booking.gleeze.com/oauth2/redirect
      - https://jumpion.gleeze.com/oauth2/redirect
      - https://ford.gleeze.com/oauth2/redirect
      - https://rewura.gleeze.com/oauth2/redirect
      - https://ford.local/oauth2/redirect
      - https://rewura.com/oauth2/redirect
      - https://dev.rewura.com/oauth2/redirect
      - https://dev2.rewura.com/oauth2/redirect
      - http://localhost/oauth2/redirect
      - http://localhost:8300/oauth2/redirect
      - http://localhost:8400/oauth2/redirect
      - http://localhost:8080/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
      - exp://172.20.10.3:19002/oauth2/callback
      - exp://172.20.10.3:19002/oauth2/redirect
      - exp://wg-qka.notbrent.app.exp.direct

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.oauth2.client: DEBUG
    org.springframework.security.oauth2.core: DEBUG